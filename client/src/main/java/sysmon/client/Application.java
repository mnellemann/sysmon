/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sysmon.client;

import org.apache.camel.main.Main;
import org.slf4j.impl.SimpleLogger;
import picocli.CommandLine;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.concurrent.Callable;

@CommandLine.Command(name = "sysmon-client", mixinStandardHelpOptions = true)
public class Application implements Callable<Integer> {

    @CommandLine.Option(names = { "-s", "--server-url" }, description = "Server URL (default: ${DEFAULT-VALUE}).", defaultValue = "http://127.0.0.1:9925/metrics", paramLabel = "<url>")
    private URL serverUrl;

    @CommandLine.Option(names = { "-n", "--hostname" }, description = "Client hostname (default: <hostname>).", paramLabel = "<name>")
    private String hostname;

    @CommandLine.Option(names = { "-p", "--plugin-dir" }, description = "Plugin jar path (default: ${DEFAULT-VALUE}).", paramLabel = "<path>", defaultValue = "/opt/sysmon/plugins")
    private String pluginPath;

    @CommandLine.Option(names = { "-c", "--conf" }, description = "Configuration file [default: '/etc/sysmon-client.toml'].", paramLabel = "<file>", defaultValue = "/etc/sysmon-client.toml")
    private File configurationFile;

    @CommandLine.Option(names = { "-d", "--debug" }, description = "Enable debugging (default: ${DEFAULT_VALUE}).")
    private boolean enableDebug = false;


    public static void main(String... args) {
        int exitCode = new CommandLine(new Application()).execute(args);
        System.exit(exitCode);
    }


    @Override
    public Integer call() throws IOException {

        Configuration configuration = new Configuration();

        if(enableDebug) {
            System.setProperty(SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "DEBUG");
        }

        if(hostname == null || hostname.isEmpty()) {
            try {
                hostname = InetAddress.getLocalHost().getHostName();
            } catch (UnknownHostException e) {
                System.err.println("Could not detect hostname. Use the '-n' or '--hostname' option to specify it.");
                return -1;
            }
        }

        String pf4jPluginsDir = System.getProperty("pf4j.pluginsDir");
        if(pf4jPluginsDir != null) {
            pluginPath = pf4jPluginsDir;
        }

        String sysmonCfgFile = System.getProperty("sysmon.cfgFile");
        if(sysmonCfgFile != null) {
            configurationFile = new File(sysmonCfgFile);
        }


        if(configurationFile.exists()) {
            try {
                configuration.parse(configurationFile.toPath());
            } catch (Exception e) {
                System.err.println(e.getMessage());
                return 1;
            }
        }

        Main main = new Main();
        main.bind("pluginPath", pluginPath);
        main.bind("myServerUrl", serverUrl.toString());
        main.bind("myHostname", hostname);
        main.bind("configuration", configuration);
        main.configure().addRoutesBuilder(ClientRouteBuilder.class);

        // now keep the application running until the JVM is terminated (ctrl + c or sigterm)
        try {
            main.run();
        } catch (Exception e) {
            System.err.println(e.getMessage());
            return 1;
        }

        return 0;

    }

}

